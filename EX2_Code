
#1 sample from the Weibull distribution 

WB<-rweibull(1000,1,1)

f1 <- function(x,a,b) {
  u<-runif(1000,0,1)
  x<-b*(-log(1-u))^(1/a)
  return(x)
}
SimSamples=f1(x,a=1,b=1)
par(mfrow=c(2,1))
hist(SimSamples,freq=F)
hist(WB)

#2 sample from the truncated standard Normal distribution 

install.packages("msm")
install.packages("hbmem")
install.packages("truncnorm")

library(truncnorm)
library(msm)
library(hbmem)

set.seed(1)
myrbeta<-function(n,a,b) {
  # density value at the mode# to get the maximum
  c <- dtruncnorm((a-1)/((a-1)+(b-1)),-1,1,a,b) 
  # generate candidate draws
  g <- runif(n,min=-1,max=1);   
  # generate random numbers
  u <- runif(n);  
  acceptYN <- (u <= (dtruncnorm(g,-1,1,a,b)/c)); # f/cg
  return(g[acceptYN]);
}

plot(density(myrbeta(1000,0,1)))

#3 Exponential distribution 
#(1)
#the silmulation is not quite ideal the first time
NumIter<-1000
draws<-rep(0,NumIter)
draws[1]<-2
for(i in 2 :NumIter){
  proposed<-runif(1,draws[i=1]-ball,draws[i-1]+ball)
  if(runif(1)<(dexp(proposed,rate=10)/dexp(draws[i-1],rate=10))){
    draws[i]<-proposed
  }
  else{
    draws[i]<-draws[i-1]
  }
}
Last500<-draws[c(501:1000)]
par(mfrow=c(3,1))
plot(Last500,type="1")
hist(Last500, nclass=50)
hist(rexp(500,rate=10),nclass=50)

#the simulation gets better after choosing a more appropriate ball number.
#a good proposal distribution has neither too small nor too large ball so that the effective sample size is relatively large.
ball<-350
NumIter<-1000
draws<-rep(0,NumIter)
draws[1]<-2
for(i in 2:NumIter){
  proposed<-runif(1,draws[i-1]-ball,draws[i-1]+ball)
  if(runif(1)<(dexp(proposed,rate=0.01)/dexp(draws[i-1],rate=0.01))){
    draws[i]<-proposed
  }
  else{
    draws[i]<-draws[i-1]
  }
}
Last500<-draws[c(501:1000)]
par(mfrow=c(3,1))
plot(Last500,type="1")
hist(Last500, nclass=50)
hist(rexp(500,rate=10),nclass=50)

#(2)Differences come from dependence of each step and randomness between different samplings out of 500.
Median500=rep(NA,50)
q_99=rep(NA,50)
for (j in 1:50){
  ball<-350
  NumIter<-1000
  draws<-rep(0,NumIter)
  draws[1]<-2
  for (i in 2:NumIter){
    proposed<-runif(1,draws[i-1]-ball,draws[i-1]+ball)
    if (runif(1)<(dexp(proposed,rate=0.01)/dexp(draws[i-1],rate=0.01))){
      draws[i]<-proposed
    }
    else{
      draws[i]<-draws[i-1]
    }
  }
  Last500=draws[c(501,1000)]
  Median500[j]=median(Last500)
  q_99[j]=quantile(Last500,probs=0.99)
}
hist(Median500, freq=FALSE, main="Medians")
abline(v=qexp(0.5,rate=0.01))

hist(q_99,freq=FALSE, main="Quantile 99%")
abline(v=qexp(0.99, rate=0.01))
